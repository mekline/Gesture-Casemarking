noagreetable2 <- gestable[gestable$Last3.Compare == 0,]
noagreetable2 <- noagreetable2[,c("Subject", "GestureCondition", "Trial.Number", "Clipped.Movie.File", "Event", "Eun.Last3", "Mig.Last3", "Initial.Coder", "Blind.Coder")]
write.csv(noagreetable2, file = paste0(directory, "/Last3NoAgree.csv"))
#Produce table that spits out disagreement on SPATIAL.
noagreetable4 <- gestable[gestable$SpaCue.Agree == 0,]
noagreetable4 <- noagreetable4[,c("Subject", "GestureCondition", "Trial.Number", "Clipped.Movie.File", "Event", "Spatial.Cue", "Spatial.Cue.Recode", "Initial.Coder", "Blind.Coder")]
write.csv(noagreetable4, file = paste0(directory, "/SpatialNoAgree.csv"))
########
# AT THIS POINT, a third coder worked with MS to tiebreak/resolve by discussion any video that had been coded
# differently by the two coders. For Word Order, their final judgement, and the nature of the disagreement, are recorded in 2
# new columns in the file Last3NoAgree_Reconciliation.csv, loaded back in below.
#
# For Spatial, their final judgment is recorder in SpatialNoAgree_Reconciliation.csv.  It turned out that agreement was
# initially very low, so we reworked the spatial definitions, and Reconciliation was done by adhering to this new
# standard in discussion. Finally, a coder blind to all hypotheses in the experiment coded 10% of the spatial
# info task following these new instructions.
########
#Load the files back in
wordOrderNoAgreeTable <- read.csv(paste0(directory, "/Last3NoAgreeReconciliation.csv"), header = TRUE)
spatialNoAgreeTable <- read.csv(paste0(directory, "/SpatialNoAgreeReconciliation.csv"), header = TRUE)
#Drop columns that are just duplicated in gestable/we don't need.
wordOrderNoAgreeTable <- wordOrderNoAgreeTable[,c('Subject','GestureCondition','Trial.Number', 'Final.Decision', 'Final.Clean', 'Multiple.V', 'Discussed.With', 'Disagree.Reason')]
spatialNoAgreeTable$Spatial.Final.Decision <- spatialNoAgreeTable$Final.Decision
spatialNoAgreeTable$Spatial.Discussed.With <- spatialNoAgreeTable$Discussed.With
spatialNoAgreeTable <- spatialNoAgreeTable[,c('Subject','GestureCondition','Trial.Number','Spatial.Final.Decision','Spatial.Discussed.With')]
######
#Merge those lines back on!
#For WordOrder, We need to make a 'final clean' column that takes 1) Eun Last3 coding where there
#is no disagreement, and 2) FinalClean where there was disagreement. Also mark disagreement type as either what
#it was, or as noDisagreement.
#For Spatial, FinalDecision will be the final decision from MS/MG discussion, OR the original if there was
#no disagreement. Disagreement type isn't marked, there's just spatial or no...
#
# Also keep a 'final long' column that lists people's whole gesture sequence, so we can compare those...
alldata <- merge(gestable, wordOrderNoAgreeTable, by=c('Subject','GestureCondition','Trial.Number'), all=TRUE)
alldata <- merge(alldata, spatialNoAgreeTable, by=c('Subject','GestureCondition','Trial.Number'), all=TRUE)
alldata$Disagree.Reason <- as.character(alldata$Disagree.Reason)
alldata[is.na(alldata$Final.Clean),]$Disagree.Reason <- "NoDisagreement"
alldata$Final.Clean <- as.character(alldata$Final.Clean)
alldata[is.na(alldata$Final.Clean),]$Final.Clean <- alldata[is.na(alldata$Final.Clean),]$Eun.Last3
alldata[is.na(alldata$Spatial.Final.Decision),]$Spatial.Final.Decision <- alldata[is.na(alldata$Spatial.Final.Decision),]$Spatial.Cue
alldata$Final.Long <- as.character(alldata$Final.Decision)
alldata[is.na(alldata$Final.Long),]$Final.Long <- alldata[is.na(alldata$Final.Long),]$Word.Order #MS/EL's original original coding!
#######
# Final agreement calculations to report!
#Classify all items as VerbMedial, VerbLateral, or Unclassified
#This will also decide individual items to exclude (for not consisting of exactly one S,V,O, or for having
# parenthesis orders that make verb medial/final judgment impossible.
alldata$WordOrder.Classified <- "Unclassified"
alldata[alldata$Final.Clean == "SOV",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "OSV",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "VSO",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "VOS",]$WordOrder.Classified <- "VerbLateral"
#Parenthesis cases!
alldata[alldata$Final.Clean == "V(OS)",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "V(SO)",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "(SO)V",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "(OS)V",]$WordOrder.Classified <- "VerbLateral"
alldata[alldata$Final.Clean == "SVO",]$WordOrder.Classified <- "VerbMedial"
alldata[alldata$Final.Clean == "OVS",]$WordOrder.Classified <- "VerbMedial"
#And find out the final kappa numbers we need: Agreement by Medial/Lateral/Undefined, and Spatial agreement ala Katy
#Have to restate Eun.Last3 and Mig.Last3 in the same way as final decisions for this....
alldata[is.na(alldata$Eun.Last3),]$Eun.Last3 <- "NoCode"
alldata$Eun.Classified <- "Unclassified"
alldata[alldata$Eun.Last3 == "SOV",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "OSV",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "VSO",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "VOS",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "V(OS)",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "V(SO)",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "(SO)V",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "(OS)V",]$Eun.Classified <- "VerbLateral"
alldata[alldata$Eun.Last3 == "SVO",]$Eun.Classified <- "VerbMedial"
alldata[alldata$Eun.Last3 == "OVS",]$Eun.Classified <- "VerbMedial"
alldata[is.na(alldata$Mig.Last3),]$Mig.Last3 <- "NoCode"
alldata$Mig.Classified <- "Unclassified"
alldata[alldata$Mig.Last3 == "SOV",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "OSV",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "VSO",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "VOS",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "V(OS)",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "V(SO)",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "(SO)V",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "(OS)V",]$Mig.Classified <- "VerbLateral"
alldata[alldata$Mig.Last3 == "SVO",]$Mig.Classified <- "VerbMedial"
alldata[alldata$Mig.Last3 == "OVS",]$Mig.Classified <- "VerbMedial"
kappa2(alldata[,c('Mig.Classified','Eun.Classified')]) #Not sure about the weight paradigm! but this matches MS
alldata$Classified.WO.Compare <- alldata$Mig.Classified == alldata$Eun.Classified
mean(alldata$Classified.WO.Compare)
#And spatial-Katy agreement
katydata <- alldata[!is.na(alldata$Spatial.Cue.Katy),]
kappa2(katydata[,c('Spatial.Cue.Katy','Spatial.Final.Decision')])
katydata$Classified.Spatial.Compare <- katydata$Spatial.Cue.Katy == katydata$Spatial.Final.Decision
mean(katydata$Classified.Spatial.Compare)
######
# Column cleanup and renaming
#Now drop all the preliminary codings & 'mush' columns, leaving us with just Final.WordOrder.Clean and Final.Spatial.Clean
#And give them slightly more transparent names...
alldata <- alldata[,c("Subject","GestureCondition","Trial.Number","Object.Type","Event","Used.ASL", "Final.Long", "Final.Clean","WordOrder.Classified","Spatial.Final.Decision","Clipped.Movie.File")]
names(alldata) <- c("Subject", "GestureCondition","Trial.Number", "Object.Type", "Sentence", "Used.ASL", "Final.Full.WordOrder", "WordOrder","WordOrder.Classified","SpatialCue","Clipped.Movie.File" )
#Make some columns easier for humans to read...
alldata$SpatialCue <- as.character(alldata$SpatialCue)
alldata[is.na(alldata$SpatialCue),]$SpatialCue <- "NA"
alldata[alldata$SpatialCue == 1,]$SpatialCue <- "Spatial.Present"
alldata[alldata$SpatialCue == 0,]$SpatialCue <- "Spatial.Absent"
################
#Uploading the embodiment coding (redone from the 'E/no E' style codes), plus participant-level averages for graphing
#################
#'Embodiment' (presence of body-based sign) - added coding and recalculating orders in the way relevant to Hall's theory (deal w edge cases)
# We want to check if Embodiment (in the second task) made a difference for SOV use For this, read in the new Embodiment coding
#that MS did
embodiment_data <- read.csv(paste0(directory, "/EmbodimentHallRecode.csv"), header = TRUE)
#drop some duplicate columns we dont' need...
embodiment_data <- embodiment_data[,c("Clipped.Movie.File","Trial.Number", "Agent.Embod","Verb.Embod","Patient.Embod")]
alldata <- merge(alldata, embodiment_data, by=c("Clipped.Movie.File","Trial.Number"),all.X=TRUE, all.y=FALSE)
alldata <- na.omit(alldata) #a recalcitrate NA line...
#Did Embodiment change across the 2 conditions? Check Agent Verb Patient
table(alldata$Agent.Embod, alldata$Object.Type, alldata$GestureCondition)
table(alldata$Verb.Embod, alldata$Object.Type, alldata$GestureCondition)
table(alldata$Patient.Embod, alldata$Object.Type, alldata$GestureCondition)
#Recode a typo :)
alldata[alldata$Patient.Embod == "o",]$Patient.Embod <- 0
#Add New WordOrder classifications The distinction is whether s is the last
#entity before the v., rather than whether the S and O are on the same side
#of the V.
alldata[is.na(alldata$WordOrder),]$WordOrder <- "Unclassified"
alldata$WordOrder.Embod.Classified <- "Unclassified"
alldata[alldata$WordOrder == "SOV",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "OSV",]$WordOrder.Embod.Classified <- "Adjacent"
alldata[alldata$WordOrder == "VSO",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "VOS",]$WordOrder.Embod.Classified <- "NonAdjacent"
#Parenthesis cases
alldata[alldata$WordOrder == "V(OS)",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "V(SO)",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "(SO)V",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "(OS)V",]$WordOrder.Embod.Classified <- "NonAdjacent"
alldata[alldata$WordOrder == "SVO",]$WordOrder.Embod.Classified <- "Adjacent"
alldata[alldata$WordOrder == "OVS",]$WordOrder.Embod.Classified <- "NonAdjacent"
######
# Final subject inclusion/checking
# (and find out How many items did each person complete?)
#Make sure the dropped people really got dropped, they snuck back in during item comparisons...
subtable <- subtable[c("Participant","To.include")]
names(subtable) <- c("Subject","ToInclude.Participant")
alldata <- merge(alldata, subtable, by=c("Subject"))
alldata <- alldata[alldata$ToInclude == 1,]
numSigns <- aggregate(alldata$WordOrder, by=list(alldata$Subject),length)
#Yay! Everyone did all the trials!
#Print out a tidy data table for people who don't want to debug blind coding/merging steps.
tidydir <- '/Users/mekline/Dropbox/_Projects/Gesture/Gesture-Casemark Repo/Tidy data/' #CHANGE THIS IF RUNNING ON NOT MY LAPTOP ##LINE TO REDACT FOR PEER REVIEW
write.csv(alldata, file = paste0(tidydir, "alldata_tidy.csv"))
###### START HERE TO USE TIDY DATA INSTEAD OF FULL CODER RECONCILIATION (uncomment the next line)
alldata <- read.csv(paste0(tidydir, "alldata_tidy.csv"), header = TRUE)
######
#Final *item* inclusion (this was done along the way in previous tests, which was probably incorrect). We do this
#by dropping the small # of items that couldn't be coded on the 3 key dimensions.
alldata <- alldata[!(alldata$WordOrder.Classified == "Unclassified"),] #Word order
alldata <- alldata[!(alldata$SpatialCue == "?"),] #Casemarking
#For RCP/Embodiment, we actually care about the union of P and V embodiment
alldata <- alldata[!(alldata$Verb.Embod == "?"),]
alldata <- alldata[!(alldata$Patient.Embod == "?"),]
alldata$PV.Embod <- (as.numeric(as.character(alldata$Verb.Embod)) == 1) & (as.numeric(as.character(alldata$Patient.Embod)) == 1)
###### START HERE TO USE TIDY DATA INSTEAD OF FULL CODER RECONCILIATION (uncomment the next line)
alldata <- read.csv(paste0(tidydir, "alldata_tidy.csv"), header = TRUE)
######
#Final *item* inclusion (this was done along the way in previous tests, which was probably incorrect). We do this
#by dropping the small # of items that couldn't be coded on the 3 key dimensions.
alldata <- alldata[!(alldata$WordOrder.Classified == "Unclassified"),] #Word order
alldata <- alldata[!(alldata$SpatialCue == "?"),] #Casemarking
#For RCP/Embodiment, we actually care about the union of P and V embodiment
alldata <- alldata[!(alldata$Verb.Embod == "?"),]
alldata <- alldata[!(alldata$Patient.Embod == "?"),]
alldata$PV.Embod <- (as.numeric(as.character(alldata$Verb.Embod)) == 1) & (as.numeric(as.character(alldata$Patient.Embod)) == 1)
#Optionally, drop non SuperGoodResponses (anything with word order oddities; we include here the ~125 items but it doesn't effect results materially)
#alldata <- alldata[alldata$SuperGoodResponse == "Yes",]
#################################################################
## REPORT DESCRIPTIVES
#Report S counts
length(unique(alldata$Subject))
#Report counts of SOV versus SVO instances in Free and Hand conditions
table(alldata$WordOrder.Classified, alldata$Object.Type, alldata$GestureCondition)
#And when were spatial cues actually produced?
table(alldata$SpatialCue, alldata$WordOrder.Classified, alldata$Object.Type)
#Let's look just at the second experiment to see if they really produced spatial info as instructed...
instructiondata <- alldata[alldata$GestureCondition == "Case",]
table(instructiondata$SpatialCue, instructiondata$WordOrder.Classified, instructiondata$Object.Type)
#What about early casemarkers in task ?
noinstructiondata <- alldata[alldata$GestureCondition == "Free",]
table(noinstructiondata$SpatialCue, noinstructiondata$WordOrder.Classified, noinstructiondata$Object.Type)
#More descriptives of responses...
#How many items are just an S, O, and V?
#Does Long not equal Clean?
#Does type equal Unclassified? 191
#Parentheses?
nrow(alldata[alldata$WordOrder == "(SO)V",]) #The gesture string has simultaneous S and O, then V
#Mark all of these in case anyone is worried about our data coding (we keep all, but option to drop SuperGoodResponse=='No')
#If this isn't working, it's because the WordORder columns have been made into factors.  as.character() them)
alldata$SuperGoodResponse <- "Yes"
alldata[as.character(alldata$Final.Full.WordOrder) != as.character(alldata$WordOrder),]$SuperGoodResponse <- "No"
alldata[alldata$WordOrder.Classified == "Unclassified",]$SuperGoodResponse <- "No"
alldata[alldata$WordOrder == "(SO)V",]$SuperGoodResponse <- "No"
#Look here if you're curious about weird word orders that we classified as verb medial or lateral!
#Uncomment to see the full list of 'oddball' gesture orders produced
#foo <- alldata[as.character(alldata$Final.Full.WordOrder) != as.character(alldata$WordOrder) & alldata$WordOrder.Classified != "Unclassified",]$Final.Full.WordOrder
#table(foo)
###### START HERE TO USE TIDY DATA INSTEAD OF FULL CODER RECONCILIATION (uncomment the next line)
alldata <- read.csv(paste0(tidydir, "alldata_tidy.csv"), header = TRUE)
######
#Final *item* inclusion (this was done along the way in previous tests, which was probably incorrect). We do this
#by dropping the small # of items that couldn't be coded on the 3 key dimensions.
alldata <- alldata[!(alldata$WordOrder.Classified == "Unclassified"),] #Word order
alldata <- alldata[!(alldata$SpatialCue == "?"),] #Casemarking
#For RCP/Embodiment, we actually care about the union of P and V embodiment
alldata <- alldata[!(alldata$Verb.Embod == "?"),]
alldata <- alldata[!(alldata$Patient.Embod == "?"),]
alldata$PV.Embod <- (as.numeric(as.character(alldata$Verb.Embod)) == 1) & (as.numeric(as.character(alldata$Patient.Embod)) == 1)
#Optionally, drop non SuperGoodResponses (anything with word order oddities; we include here the ~125 items but it doesn't effect results materially)
#To do this, run the descriptives, then come back up here and uncomment the following.
#alldata <- alldata[alldata$SuperGoodResponse == "Yes",]
#################################################################
## REPORT DESCRIPTIVES
#Report S counts
length(unique(alldata$Subject))
#Report counts of SOV versus SVO instances in Free and Hand conditions
table(alldata$WordOrder.Classified, alldata$Object.Type, alldata$GestureCondition)
#And when were spatial cues actually produced?
table(alldata$SpatialCue, alldata$WordOrder.Classified, alldata$Object.Type)
#Let's look just at the second experiment to see if they really produced spatial info as instructed...
instructiondata <- alldata[alldata$GestureCondition == "Case",]
table(instructiondata$SpatialCue, instructiondata$WordOrder.Classified, instructiondata$Object.Type)
#What about early casemarkers in task ?
noinstructiondata <- alldata[alldata$GestureCondition == "Free",]
table(noinstructiondata$SpatialCue, noinstructiondata$WordOrder.Classified, noinstructiondata$Object.Type)
#did they casemark differently depending on animacy?
AnimacySpatialScores <- aggregate(alldata$Casemarked, by=list(alldata$Subject, alldata$Object.Type, alldata$GestureCondition), mean.na.rm)
names(AnimacySpatialScores) <- c("Subject", "Object.Type", "GestureCondition", "Casemarked")
with(AnimacySpatialScores, tapply(Casemarked, list(Object.Type, GestureCondition), mean, na.rm=TRUE), drop=TRUE)
###### START HERE TO USE TIDY DATA INSTEAD OF FULL CODER RECONCILIATION (uncomment the next line)
alldata <- read.csv(paste0(tidydir, "alldata_tidy.csv"), header = TRUE)
######
#Final *item* inclusion (this was done along the way in previous tests, which was probably incorrect). We do this
#by dropping the small # of items that couldn't be coded on the 3 key dimensions.
alldata <- alldata[!(alldata$WordOrder.Classified == "Unclassified"),] #Word order
alldata <- alldata[!(alldata$SpatialCue == "?"),] #Casemarking
#For RCP/Embodiment, we actually care about the union of P and V embodiment
alldata <- alldata[!(alldata$Verb.Embod == "?"),]
alldata <- alldata[!(alldata$Patient.Embod == "?"),]
alldata$PV.Embod <- (as.numeric(as.character(alldata$Verb.Embod)) == 1) & (as.numeric(as.character(alldata$Patient.Embod)) == 1)
#Optionally, drop non SuperGoodResponses (anything with word order oddities; we include here the ~125 items but it doesn't effect results materially)
#To do this, run the descriptives, then come back up here and uncomment the following.
#alldata <- alldata[alldata$SuperGoodResponse == "Yes",]
#################################################################
## REPORT DESCRIPTIVES
#Report S counts
length(unique(alldata$Subject))
#Report counts of SOV versus SVO instances in Free and Hand conditions
table(alldata$WordOrder.Classified, alldata$Object.Type, alldata$GestureCondition)
#And when were spatial cues actually produced?
table(alldata$SpatialCue, alldata$WordOrder.Classified, alldata$Object.Type)
#Let's look just at the second experiment to see if they really produced spatial info as instructed...
instructiondata <- alldata[alldata$GestureCondition == "Case",]
table(instructiondata$SpatialCue, instructiondata$WordOrder.Classified, instructiondata$Object.Type)
#What about early casemarkers in task ?
noinstructiondata <- alldata[alldata$GestureCondition == "Free",]
table(noinstructiondata$SpatialCue, noinstructiondata$WordOrder.Classified, noinstructiondata$Object.Type)
#More descriptives of responses...
#How many items are just an S, O, and V?
#Does Long not equal Clean?
#Does type equal Unclassified? 191
#Parentheses?
nrow(alldata[alldata$WordOrder == "(SO)V",]) #The gesture string has simultaneous S and O, then V
#Mark all of these in case anyone is worried about our data coding (we keep all, but option to drop SuperGoodResponse=='No')
#If this isn't working, it's because the WordORder columns have been made into factors.  as.character() them)
alldata$SuperGoodResponse <- "Yes"
alldata[as.character(alldata$Final.Full.WordOrder) != as.character(alldata$WordOrder),]$SuperGoodResponse <- "No"
alldata[alldata$WordOrder.Classified == "Unclassified",]$SuperGoodResponse <- "No"
alldata[alldata$WordOrder == "(SO)V",]$SuperGoodResponse <- "No"
#Look here if you're curious about weird word orders that we classified as verb medial or lateral!
#Uncomment to see the full list of 'oddball' gesture orders produced
#foo <- alldata[as.character(alldata$Final.Full.WordOrder) != as.character(alldata$WordOrder) & alldata$WordOrder.Classified != "Unclassified",]$Final.Full.WordOrder
#table(foo)
####
# Add scores-per-participant. (Need this to make the bootstrapped confidence intervals for the graphs...)
###
#Make scores for each participant
alldata$ChoseLateral <- 0
alldata[alldata$WordOrder.Classified == "VerbLateral",]$ChoseLateral <- 1
ParticipantScores <- aggregate(alldata$ChoseLateral, by=list(alldata$Subject, alldata$Object.Type, alldata$GestureCondition), mean.na.rm)
names(ParticipantScores) <- c("Subject", "Object.Type", "GestureCondition", "ChoseLateral")
#Table for scores too
with(ParticipantScores, tapply(ChoseLateral, list(Object.Type, GestureCondition), mean, na.rm=TRUE), drop=TRUE)
#Time for bootstrapped confidence intervals around the means of the 4 conditions! (for the graphs)
PersonFree.boot.mean = bootstrap(ParticipantScores[ParticipantScores$Object.Type=="Person" & ParticipantScores$GestureCondition=="Free",]$ChoseLateral, 1000, mean)
quantile(PersonFree.boot.mean$thetastar, c(0.025, 0.975))
PersonHand.boot.mean = bootstrap(ParticipantScores[ParticipantScores$Object.Type=="Person" & ParticipantScores$GestureCondition=="Case",]$ChoseLateral, 1000, mean)
quantile(PersonHand.boot.mean$thetastar, c(0.025, 0.975))
ObjectFree.boot.mean = bootstrap(ParticipantScores[ParticipantScores$Object.Type=="Object" & ParticipantScores$GestureCondition=="Free",]$ChoseLateral, 1000, mean)
quantile(ObjectFree.boot.mean$thetastar, c(0.025, 0.975))
ObjectHand.boot.mean = bootstrap(ParticipantScores[ParticipantScores$Object.Type=="Object" & ParticipantScores$GestureCondition=="Case",]$ChoseLateral, 1000, mean)
quantile(ObjectHand.boot.mean$thetastar, c(0.025, 0.975))
#And scores on Spatial stuff!
alldata$Casemarked <- 0
alldata[alldata$SpatialCue == "Spatial.Present",]$Casemarked <- 1
SpatialScores <- aggregate(alldata$Casemarked, by=list(alldata$Subject, alldata$WordOrder.Classified, alldata$GestureCondition), mean.na.rm)
names(SpatialScores) <- c("Subject", "WordOrder.Classified", "GestureCondition", "Casemarked")
#Table for scores too
with(SpatialScores, tapply(Casemarked, list(WordOrder.Classified, GestureCondition), mean, na.rm=TRUE), drop=TRUE)
#Time for bootstrapped confidence intervals around the means of the 4 conditions!
PersonFree.boot.mean = bootstrap(SpatialScores[SpatialScores$WordOrder.Classified=="VerbLateral" & SpatialScores$GestureCondition=="Free",]$Casemarked, 1000, mean)
quantile(PersonFree.boot.mean$thetastar, c(0.025, 0.975))
PersonHand.boot.mean = bootstrap(SpatialScores[SpatialScores$WordOrder.Classified=="VerbLateral" & SpatialScores$GestureCondition=="Case",]$Casemarked, 1000, mean)
quantile(PersonHand.boot.mean$thetastar, c(0.025, 0.975))
ObjectFree.boot.mean = bootstrap(SpatialScores[SpatialScores$WordOrder.Classified=="VerbMedial" & SpatialScores$GestureCondition=="Free",]$Casemarked, 1000, mean)
quantile(ObjectFree.boot.mean$thetastar, c(0.025, 0.975))
ObjectHand.boot.mean = bootstrap(SpatialScores[SpatialScores$WordOrder.Classified=="VerbMedial" & SpatialScores$GestureCondition=="Case",]$Casemarked, 1000, mean)
quantile(ObjectHand.boot.mean$thetastar, c(0.025, 0.975))
#########################################
##STATISTICAL TESTS!!
#########################################
#Factorizing everything for the glmers
alldata$WordOrder.Classified <- as.factor(alldata$WordOrder.Classified)
alldata$Object.Type <- as.factor(alldata$Object.Type)
alldata$SpatialCue <- as.factor(alldata$SpatialCue)
alldata$GestureCondition <- as.factor(alldata$GestureCondition)
freedata <- alldata[alldata$GestureCondition == "Free",]
handdata <- alldata[alldata$GestureCondition == "Case",]
freedata$WordOrder.Classified <- as.factor(freedata$WordOrder.Classified)
handdata$WordOrder.Classified <- as.factor(handdata$WordOrder.Classified)
freedata$Object.Type <- as.factor(freedata$Object.Type)
handdata$Object.Type <- as.factor(handdata$Object.Type)
########
#Within Experiments- were people more likely to use SVO with Animate?
########
free_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=freedata, family="binomial")
free_nofix <- glmer(WordOrder.Classified ~ (Object.Type|Subject) + (1|Sentence), data=freedata, family="binomial")
anova(free_model,free_nofix)
free_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=freedata, family="binomial")
free_nofix <- glmer(WordOrder.Classified ~ (Object.Type|Subject) + (1|Sentence), data=freedata, family="binomial")
free_model <- glmer(WordOrder.Classified ~ Object.Type  + (1|Subject) + (1|Sentence), data=freedata, family="binomial")
free_nofix <- glmer(WordOrder.Classified ~ (1|Subject) + (1|Sentence), data=freedata, family="binomial")
a
anova(free_model,free_nofix)
free_nofix <- glmer(WordOrder.Classified ~ 1 + (1|Subject) + (1|Sentence), data=freedata, family="binomial")
anova(free_model,free_nofix)
hand_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
hand_nofix <- glmer(WordOrder.Classified ~  1+ (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
hand_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
hand_nofix <- glmer(WordOrder.Classified ~  1 + (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
anova(hand_model,hand_nofix)
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (Object.Type*GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (Object.Type+GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (Object.Type|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (1|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (1|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model2 <- glmer(WordOrder.Classified ~ Object.Type + GestureCondition  + (1|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
anova(word_order_model, word_order_model2)
word_order_model3 <- glmer(WordOrder.Classified ~ GestureCondition  + (1|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
#Check (fixed) effects by removal!
#Interaction?
word_order_model2 <- glmer(WordOrder.Classified ~ Object.Type + GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model, word_order_model2)
word_order_model3 <- glmer(WordOrder.Classified ~ GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model2, word_order_model3)
word_order_model4 <- glmer(WordOrder.Classified ~ Object.Type  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model2, word_order_model4)
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (Object.Type*GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (Object.Type+GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
#Check effects by removal: Interaction?
case_model2 <- glmer(Casemarked ~ Object.Type+GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(case_model, case_model2)
case_model3 <- glmer(Casemarked ~ Object.Type  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(case_model2, case_model3)
#Animacy? (not so interesting)
case_model4 <- glmer(Casemarked ~ GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(case_model2, case_model4)
animdata <- alldata[alldata$Object.Type == "Person",] #PV.Embod/RCP gestures don't exist for inanimate patient sentences! (nobody embodies inanimate patients)
embod_model <- glmer(PV.Embod ~ GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(embod_model, embod_model_nofix)
animdata <- alldata[alldata$Object.Type == "Person",] #PV.Embod/RCP gestures don't exist for inanimate patient sentences! (nobody embodies inanimate patients)
embod_model <- glmer(PV.Embod ~ GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
embod_model_nofix <- glmer(PV.Embod ~ 1  + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(embod_model, embod_model_nofix)
free_animdata <- animdata[animdata$GestureCondition == "Free",]
hand_animdata <- animdata[animdata$GestureCondition == "Case",]
spatialvsorder_free <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=free_animdata, family="binomial")
spatialvsorder_free <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=free_animdata, family="binomial")
spatialvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (1|Sentence), data=free_animdata, family="binomial")
anova(spatialvsorder_free, spatialvsorder_free2)
spatialvsorder_hand <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=hand_animdata, family="binomial")
spatialvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (1|Sentence), data=hand_animdata, family="binomial")
anova(spatialvsorder_hand, spatialvsorder_hand2)
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition  + (Casemarked*GestureCondition|Subject) + (GestureCondition*Casemarked|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition  + (Casemarked*GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked+GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
spatialvsorder2 <- glmer(WordOrder.Classified ~ Casemarked+GestureCondition + (GestureCondition|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(spatialvsorder, spatialvsorder2)
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
anova(bodyvsorder_free, bodyvsorder_free2)
bodyvsorder_hand <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=hand_animdata, family="binomial")
embod_model <- glmer(PV.Embod ~ GestureCondition  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
embod_model <- glmer(PV.Embod ~ GestureCondition  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
embod_model_nofix <- glmer(PV.Embod ~ 1  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
anova(embod_model, embod_model_nofix)
spatialvsorder_free <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=free_animdata, family="binomial")
spatialvsorder_free <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=free_animdata, family="binomial")
spatialvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (Casemarked|Sentence), data=free_animdata, family="binomial")
anova(spatialvsorder_free, spatialvsorder_free2)
spatialvsorder_hand <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=hand_animdata, family="binomial")
spatialvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (Casemarked|Sentence), data=hand_animdata, family="binomial")
anova(spatialvsorder_hand, spatialvsorder_hand2)
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked*GestureCondition|Subject) + (Casemarked*GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked+GestureCondition|Subject) + (Casemarked*GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked+GestureCondition|Subject) + (Casemarked+GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked|Subject) + (Casemarked+GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked|Subject) + (Casemarked|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
spatialvsorder2 <- glmer(WordOrder.Classified ~ Casemarked+GestureCondition + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(spatialvsorder, spatialvsorder2)
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
anova(bodyvsorder_free, bodyvsorder_free2)
bodyvsorder_hand <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
bodyvsorder_hand <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
bodyvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (1|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
anova(bodyvsorder_hand, bodyvsorder_hand2)
bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=animdata, family="binomial")
bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=animdata, family="binomial")
bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (1|Sentence), data=animdata, family="binomial")
bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (1|Sentence), data=animdata, family="binomial")
bodyvsorder2 <- glmer(WordOrder.Classified ~ PV.Embod+GestureCondition  + (PV.Embod|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(bodyvsorder, bodyvsorder2)
embod_case_model <- glmer(PV.Embod ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=animdata, family="binomial")
embod_case_model <- glmer(PV.Embod ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
embod_case_model <- glmer(PV.Embod ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
embod_case_model2 <- glmer(PV.Embod ~ 1  + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(embod_case_model, embod_case_model2)
#For all tests, we show the maximal random slopes/intercepts, then the model we actually ran if any of the models in the test didn't converge.
#free_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=freedata, family="binomial")
free_model <- glmer(WordOrder.Classified ~ Object.Type  + (1|Subject) + (1|Sentence), data=freedata, family="binomial")
free_nofix <- glmer(WordOrder.Classified ~ 1 + (1|Subject) + (1|Sentence), data=freedata, family="binomial")
anova(free_model,free_nofix)
hand_model <- glmer(WordOrder.Classified ~ Object.Type  + (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
hand_nofix <- glmer(WordOrder.Classified ~  1 + (Object.Type|Subject) + (1|Sentence), data=handdata, family="binomial")
anova(hand_model,hand_nofix)
#word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (Object.Type*GestureCondition|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
word_order_model <- glmer(WordOrder.Classified ~ Object.Type*GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
#Check (fixed) effects by removal!
#Interaction?
word_order_model2 <- glmer(WordOrder.Classified ~ Object.Type + GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model, word_order_model2)
#Animacy?
word_order_model3 <- glmer(WordOrder.Classified ~ GestureCondition  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model2, word_order_model3)
#GestureCondition?
word_order_model4 <- glmer(WordOrder.Classified ~ Object.Type  + (1|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(word_order_model2, word_order_model4)
#case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (GestureCondition*Object.Type|Subject) + (GestureCondition|Sentence), data=alldata, family="binomial")
case_model <- glmer(Casemarked ~ Object.Type*GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
#Check effects by removal: Interaction?
case_model2 <- glmer(Casemarked ~ Object.Type+GestureCondition  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(case_model, case_model2)
#GestureCondition?
case_model3 <- glmer(Casemarked ~ Object.Type  + (GestureCondition|Subject) + (1|Sentence), data=alldata, family="binomial")
anova(case_model2, case_model3)
animdata <- alldata[alldata$Object.Type == "Person",] #PV.Embod/RCP gestures don't exist for inanimate patient sentences! (nobody embodies inanimate patients)
embod_model <- glmer(PV.Embod ~ GestureCondition  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
embod_model_nofix <- glmer(PV.Embod ~ 1  + (GestureCondition|Subject) + (GestureCondition|Sentence), data=animdata, family="binomial")
anova(embod_model, embod_model_nofix)
free_animdata <- animdata[animdata$GestureCondition == "Free",]
hand_animdata <- animdata[animdata$GestureCondition == "Case",]
spatialvsorder_free <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=free_animdata, family="binomial")
spatialvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (Casemarked|Sentence), data=free_animdata, family="binomial")
anova(spatialvsorder_free, spatialvsorder_free2)
spatialvsorder_hand <- glmer(WordOrder.Classified ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=hand_animdata, family="binomial")
spatialvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (Casemarked|Subject) + (Casemarked|Sentence), data=hand_animdata, family="binomial")
anova(spatialvsorder_hand, spatialvsorder_hand2)
#Between exp
#spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked*GestureCondition|Subject) + (Casemarked*GestureCondition|Sentence), data=animdata, family="binomial")
spatialvsorder <- glmer(WordOrder.Classified ~ Casemarked*GestureCondition + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
spatialvsorder2 <- glmer(WordOrder.Classified ~ Casemarked+GestureCondition + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(spatialvsorder, spatialvsorder2)
#bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
bodyvsorder_free2 <- glmer(WordOrder.Classified ~ 1  + (PV.Embod|Subject) + (1|Sentence), data=free_animdata, family="binomial")
anova(bodyvsorder_free, bodyvsorder_free2)
bodyvsorder_hand <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
bodyvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (1|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
anova(bodyvsorder_hand, bodyvsorder_hand2)
bodyvsorder_hand <- glmer(WordOrder.Classified ~ PV.Embod  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
bodyvsorder_hand2 <- glmer(WordOrder.Classified ~ 1  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=hand_animdata, family="binomial")
anova(bodyvsorder_hand, bodyvsorder_hand2)
#bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (PV.Embod|Sentence), data=animdata, family="binomial")
bodyvsorder <- glmer(WordOrder.Classified ~ PV.Embod*GestureCondition  + (PV.Embod|Subject) + (1|Sentence), data=animdata, family="binomial")
bodyvsorder2 <- glmer(WordOrder.Classified ~ PV.Embod+GestureCondition  + (PV.Embod|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(bodyvsorder, bodyvsorder2)
#embod_case_model <- glmer(PV.Embod ~ Casemarked  + (Casemarked|Subject) + (Casemarked|Sentence), data=animdata, family="binomial")
embod_case_model <- glmer(PV.Embod ~ Casemarked  + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
embod_case_model2 <- glmer(PV.Embod ~ 1  + (Casemarked|Subject) + (1|Sentence), data=animdata, family="binomial")
anova(embod_case_model, embod_case_model2)
install.packages("packrat")
